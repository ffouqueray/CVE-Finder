import requests, math, json, datetime
from bs4 import BeautifulSoup

def CVEFetch(entree):
    reponse = requests.get(f"https://www.cvedetails.com/vulnerability-search-autocomplete.php?q={entree}")
    return reponse.json()


def CVEDetailsScrap(categorie, id, debut):
    base_url = "https://www.cvedetails.com/vulnerability-list.php?"

    if id is not None : # On ajoute le bon argument pour faire la recherche
        if categorie == "Products" :
            base_url += f"&product_id={id}"
        elif categorie == "Vendors" :
            base_url += f"&vendor_id={id}"
    
    base_url += f"&year={debut.strftime('%Y')}"

    # On demande à l'utilisateur s'il veut ajouter ou non des résultats avec un CVSS de 0.0
    choix = None
    while choix is None :
        try:
            choix = int(input(f"\nSouhaitez-vous récupérer les CVE contenant un score CVSS de 0.0 ?\n1. Oui\n2. Non\nVotre choix : "))
            if choix not in [1,2] :
                raise Exception
        except:
            print(f"\nVous n'avez pas entré un nombre dans l'intervale 1-2.\nMerci de réessayer.")
            choix = None
    
    if choix == 1:
        base_url += f"&cvssscoremin=0&cvssscoremax=0"
    else :
        base_url += f"&cvssscoremin=0.1&cvssscoremax=0"

    # On check le nombre de vulnérabilités trouvées
    coverpage = requests.get(base_url).content
    soup = BeautifulSoup(coverpage, 'html5lib')

    vulnerabilities = int(soup.find(attrs={"id": "pagingb"}).find("b").text)

    if vulnerabilities > 1 :
        choix = None
        while choix is None :
            try:
                choix = int(input(f"\n{vulnerabilities} vulnérabilités ont été trouvées\nCombien voulez-vous en récupérer ?\nVotre choix : "))
                if choix < 1 or choix > vulnerabilities :
                    raise Exception
            except:
                print(f"\nVous n'avez pas entré un nombre dans l'intervale 1-{vulnerabilities}.\nMerci de réessayer.\n")
                choix = None
    else:
        return None

    

    # On split le nombre nombre de résultats en fonction du nombre de requetes à faire (50 résultats par page)
    if choix > 50:
        pages = math.ceil(choix / 50)
        sha = soup.find(attrs={'title':'Go to page 1'})['href'].split('&sha=')[1] # On récupère le sha pour avoir le droit de changer de page (sinon ça fonctionne pas)
        
        base_url += f"&&trc={vulnerabilities}"
        base_url += f"&sha={sha}"
        nombre_CVE = []
        for x in range(pages-1):
            nombre_CVE.append(50*2)
        nombre_CVE.append((choix % 50)*2)
    
    else:
        pages = 1
        nombre_CVE = [choix*2]

    CVEs = []
    for i in range(pages):
        page = f"&page={i+1}"
        
        coverpage = requests.get(f"{base_url}{page}").content
        soup = BeautifulSoup(coverpage, 'html5lib')
        
        tableau = soup.find("table", attrs={"id": f"vulnslisttable"}) # On check les 50 lignes de résultat de la page
        
        lignes = tableau.find_all('tr')[1:] # On retire le 1er qui possède le nom des champs

        
        for x in range(0, nombre_CVE[i], 2):
            title = lignes[x].find('td', attrs={'nowrap': True}).text # On récupère le nom de la CVE
            description = lignes[x+1].text.strip() # On récupère la description (dans un autre 'td', celui d'en dessous)
            cvss = lignes[x].find('div', attrs={'class': 'cvssbox'}).text # on récupère le score CVSS

            published = lignes[x].find_all('td')[5].text
            published = datetime.datetime.strptime(published, '%Y-%m-%d') # On récupère la date de publication et la met en datetime object pour la remettre comme on veut

            updated = lignes[x].find_all('td')[6].text
            updated = datetime.datetime.strptime(updated, '%Y-%m-%d') # On récupère la date de dernière modification et la met en datetime object pour la remettre comme on veut
            
            # On ajoute tout ça dans notre liste pour ensuite avoir un fichier réutilisable
            CVEs.append(
                {
                    "name": title,
                    "link": f"https://www.cvedetails.com/cve/{title}/",
                    "description": description,
                    "CVSS score" : cvss,
                    "published": published.strftime('%d/%m/%Y'),
                    "updated": updated.strftime('%d/%m/%Y')
                }
            )

    return CVEs